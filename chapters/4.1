Split Blocks
Our grug-brain static site generator only cares about two things:

Inline markdown
Block markdown
Inline markdown is what we just took care of. It's the stuff that's inside of a block. For example, the bolded text in this sentence is inline markdown.

Block-level markdown is just the separation of different sections of an entire document. In well-written markdown (which we'll just assume is the only thing going into our generator) blocks are separated by a single blank line. 
Here are 3 distinct blocks:

# This is a heading

This is a paragraph of text. It has some **bold** and _italic_ words inside of it.

- This is the first list item in a list block
- This is a list item
- This is another list item

The heading, the paragraph, and the unordered list are all separate blocks. The blank line between them is what separates them.

Assignment
Create a new function called markdown_to_blocks(markdown). It takes a raw Markdown string 
(representing a full document) as input and returns a list of "block" strings. The example above would be split into these three strings:
# This is a heading

This is a paragraph of text. It has some **bold** and _italic_ words inside of it.

- This is the first list item in a list block
- This is a list item
- This is another list item

The .split() method can be used to split a string into blocks based on a delimiter (\n\n is a double newline).
You should .strip() any leading or trailing whitespace from each block.
Remove any "empty" blocks due to excessive newlines.
Write tests for your function. Here's one to get you started:
Notice the indentation of the multiline string! Newlines shouldn't be indented because the tab will be included in the string and your tests will fail.

    def test_markdown_to_blocks(self):
        md = """
            This is **bolded** paragraph
            
            This is another paragraph with _italic_ text and `code` here
            This is the same paragraph on a new line
            
            - This is a list
            - with items
            """

        blocks = markdown_to_blocks(md)
        self.assertEqual(
            blocks,
            [
                "This is **bolded** paragraph",
                "This is another paragraph with _italic_ text and `code` here\nThis is the same paragraph on a new line",
                "- This is a list\n- with items",
            ],
        )

Run and submit the CLI tests from the root of the project.
